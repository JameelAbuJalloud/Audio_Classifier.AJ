---
import { Icon } from 'astro-icon'
astro: markdown
import { Accordion, AccordionItem, Card, Modal, ... } from 'accessible-astro-components'
import { createEffect, onCleanup } from 'solid-js';
const { src = '/astronaut-hero-img.webp' } = Astro.props
---

---
<astro>

  let mediaRecorder;
  let recordedChunks = [];

  let isRecording = false;
  let isStopped = false;
  let isPlaying = false;

  const startRecording = () => {
    isRecording = true;
    isStopped = false;
    isPlaying = false;

    mediaRecorder.start();
  };

  const stopRecording = () => {
    isRecording = false;
    isStopped = true;
    isPlaying = false;

    mediaRecorder.stop();
  };

  const playRecording = () => {
    isRecording = false;
    isStopped = false;
    isPlaying = true;

    audioPlayer.play();
  };

  onCleanup(() => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop();
    }
  });

  $: {
    recordButton.disabled = isRecording;
    stopButton.disabled = !isRecording && !recordedChunks.length;
    playButton.disabled = !recordedChunks.length || isRecording || isStopped;
    audioPlayer.src = recordedChunks.length ? URL.createObjectURL(new Blob(recordedChunks, { type: 'audio/webm' })) : '';
  }

  createEffect(() => {
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then((stream) => {
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = (event) => {
          recordedChunks.push(event.data);
        };

        mediaRecorder.onstop = () => {
          if (!isPlaying) {
            audioPlayer.src = URL.createObjectURL(new Blob(recordedChunks, { type: 'audio/webm' }));
          }

          recordedChunks = [];
        };
      })
      .catch((err) => {
        console.log('The following error occurred: ' + err);
      });
  });
</astro>

<template>
  <h1>Audio Recorder</h1>

  <div id="controls">
    <button disabled={isRecording} onclick={startRecording}>Record</button>
    <button disabled={!isRecording && !recordedChunks.length} onclick={stopRecording}>Stop</button>
    <button disabled={!recordedChunks.length || isRecording || isStopped} onclick={playRecording}>Play</button>
  </div>

  <div id="audioPlayerContainer">
    <audio id="audioPlayer" controls></audio>
  </div>
</template>

<style>
  #controls {
    margin-bottom: 20px;
  }

  button {
    font-size: 16px;
    padding: 10px 20px;
    margin-right: 10px;
  }

  #audioPlayerContainer {
    display: none;
    margin-top: 20px;
  }
</style>   
---
  
<section class="hero my-24">
  <div class="container">
    <div class="grid grid-cols-1 items-center gap-24 lg:grid-cols-2">
      <div class="flex flex-col items-center gap-8 md:items-start">
        <h1 class="text-center text-6xl md:text-left lg:text-8xl">
          <slot><span class="text-gradient">Accessible</span> Starter for Astro</slot>
        </h1>
        <div class="flex flex-col gap-3 min-[500px]:flex-row">
          <a class="button has-icon" href="https://github.com/markteekman/accessible-astro-starter">
            <Icon pack="ion" name="star-outline" />
            Star on GitHub
          </a>
          <a
            class="button has-icon color-secondary"
            href="https://github.com/markteekman/accessible-astro-starter/blob/main/README.md"
          >
            <Icon pack="ion" name="bookmark-outline" />
            Read the Docs
          </a>
        </div>
      </div>
      <img class="hidden lg:block" src={src} alt="" decoding="async" />
    </div>
  </div>
</section>

<style lang="scss">
  .text-gradient {
    background: linear-gradient(315deg, var(--primary-200) 25%, var(--secondary-500));
    background-clip: border-box;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  :global(.darkmode .text-gradient) {
    background: linear-gradient(315deg, var(--primary-200) 25%, var(--secondary-400));
    background-clip: border-box;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>
